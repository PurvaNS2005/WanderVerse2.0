{% extends 'base.html' %}
{% load static %}

{% block content %}
<link rel="stylesheet" href="{% static '/css/trip_results.css' %}">
<!-- Modal -->
<div id="addToItineraryModal" class="custom-modal">
  <div class="custom-modal-content">
    <div class="custom-modal-header">
      <h3>Add to Itinerary</h3>
      <button type="button" class="close-modal" onclick="closeModal()">&times;</button>
    </div>
    <div class="custom-modal-body">
      <div class="form-group">
        <label for="itineraryDate">Date</label>
        <input type="date" id="itineraryDate" min="{{ check_in_date }}" max="{{ check_out_date }}">
      </div>
      <div class="form-group">
        <label for="itineraryTime">Time</label>
        <div class="time-slot-input">
          <span class="time-icon">ðŸ•’</span>
          <input type="time" id="itineraryTime">
        </div>
      </div>
    </div>
    <div class="custom-modal-footer">
      <button type="button" class="custom-modal-btn custom-modal-btn-cancel" onclick="closeModal()">Cancel</button>
      <button type="button" class="custom-modal-btn custom-modal-btn-confirm">Add to Itinerary</button>
    </div>
  </div>
</div>

<!-- Toast -->
<div id="toast" class="toast"></div>

<!-- Edit Dates Modal -->
<div id="editDatesModal" class="custom-modal" style="display:none;">
  <div class="custom-modal-content">
    <div class="custom-modal-header">
      <h3>Edit Trip Dates</h3>
      <button type="button" class="close-modal" onclick="closeEditDatesModal()">&times;</button>
    </div>
    <div class="custom-modal-body">
      <div class="form-group">
        <label for="editStartDate">Start Date</label>
        <input type="date" id="editStartDate" value="{{ check_in_date }}">
      </div>
      <div class="form-group">
        <label for="editEndDate">End Date</label>
        <input type="date" id="editEndDate" value="{{ check_out_date }}">
      </div>
    </div>
    <div class="custom-modal-footer">
      <button type="button" class="custom-modal-btn custom-modal-btn-cancel" onclick="closeEditDatesModal()">Cancel</button>
      <button type="button" class="custom-modal-btn custom-modal-btn-confirm" onclick="saveEditedDates()">Save Dates</button>
    </div>
  </div>
</div>

<div class="flex flex-col h-screen bg-gray-50 pt-6">
  {% if city_info %}
  <!-- Results Section -->
  <div class="flex flex-1 px-4 sm:px-6 lg:px-8 pb-8 overflow-hidden">
    <!-- Left Panel -->
    <div class="w-full md:w-1/3 lg:w-2/5 p-6 bg-white rounded-lg shadow-xl overflow-y-auto mr-0 md:mr-4 mb-4 md:mb-0" style="max-height: calc(100vh - 120px);" id="left-panel">
      <div class="flex justify-between items-center mb-6">
        <h2 class="text-2xl font-semibold text-gray-800">{{ city_info.full_name }}</h2>
        <div>
          <a href="{% url 'create_trip' %}" class="text-sm text-indigo-600 hover:text-indigo-800 mr-4">&larr; Plan New Trip</a>
          <a href="{% url 'ai_itinerary_form' city_info.full_name %}" class="text-sm text-purple-600 hover:text-purple-800 border border-purple-600 rounded px-3 py-1">
            Generate AI Itinerary
          </a>
          <button onclick="openEditDatesModal()" class="custom-modal-btn custom-modal-btn-cancel" style="padding: 0.4rem 1rem; font-size: 0.95em;">Edit Trip Dates</button>
        </div>
      </div>

      <!-- Toggle Buttons -->
      <div class="mb-6 flex border-b">
        <button id="btn-poi" onclick="toggleView('poi')" class="flex-1 py-2 px-4 text-center font-medium text-indigo-600 border-b-2 border-indigo-600 focus:outline-none tab-button active">
          Tourist Spots
        </button>
        <button id="btn-hotels" onclick="toggleView('hotels')" class="flex-1 py-2 px-4 text-center font-medium text-gray-500 hover:text-indigo-500 focus:outline-none tab-button">
          Hotels
        </button>
        <button id="btn-itinerary" onclick="toggleView('itinerary')" class="flex-1 py-2 px-4 text-center font-medium text-gray-500 hover:text-indigo-500 focus:outline-none tab-button">
          Itinerary
        </button>
      </div>

      <!-- POI List -->
      <div id="poi-list" class="space-y-4">
        {% if pois %}
          {% for p in pois %}
            <div id="poi-item-{{ forloop.counter0 }}"
                 class="poi-list-item"
                 data-lat="{{ p.geometry.coordinates.1 }}"
                 data-lon="{{ p.geometry.coordinates.0 }}"
                 data-id="poi-marker-{{ forloop.counter0 }}"
                 data-name="{{ p.properties.name }}"
                 data-categories="{{ p.properties.categories|join:',' }}">
              <div class="flex justify-between items-start">
                <div>
                  <h3 class="font-bold text-lg text-gray-800">{{ p.properties.name }}</h3>
                  <div class="mt-2">
                    {% for category in p.properties.categories %}
                      <span class="poi-category">{{ category|title }}</span>
                    {% endfor %}
                  </div>
                </div>
                <button class="add-to-itinerary-btn" data-type="poi" data-id="{{ forloop.counter0 }}">
                  Add to Itinerary
                </button>
              </div>
            </div>
          {% endfor %}
        {% else %}
          <p class="text-gray-500 text-center py-4">No tourist spots found for this location.</p>
        {% endif %}
      </div>

      <!-- Hotel List -->
      <div id="hotel-list" class="space-y-4" style="display:none;">
        <div id="hotel-items-container">
            {% if hotels %}
                {% for hotel in hotels %}
                    <div id="hotel-item-{{ hotel.hotelId }}"
                         class="hotel-list-item"
                         {% if hotel.geoCode and hotel.geoCode.latitude and hotel.geoCode.longitude %}
                           data-lat="{{ hotel.geoCode.latitude }}"
                           data-lon="{{ hotel.geoCode.longitude }}"
                         {% endif %}
                         data-id="hotel-marker-{{ hotel.hotelId }}"
                         data-name="{{ hotel.name|default:'Hotel Name N/A' }}">
                        <div class="flex justify-between items-start">
                          <div>
                            <h3 class="font-bold text-lg text-gray-800">{{ hotel.name|default:"Hotel Name N/A" }}</h3>
                            {% if hotel.rating %}
                              <span class="hotel-rating">{{ hotel.rating }}</span>
                            {% endif %}
                            {% if hotel.address %}
                                <p class="text-sm text-gray-600 mt-2">
                                    {% if hotel.address.lines %}{{ hotel.address.lines|join:", " }}{% endif %}
                                    {% if hotel.address.lines and hotel.address.cityName %}, {% endif %}
                                    {% if hotel.address.cityName %}{{ hotel.address.cityName }}{% endif %}
                                    {% if hotel.address.countryCode %} ({{ hotel.address.countryCode }}){% endif %}
                                </p>
                            {% else %}
                                 <p class="text-sm text-gray-600 mt-2">Address not available.</p>
                            {% endif %}
                          </div>
                          <button class="add-to-itinerary-btn" data-type="hotel" data-id="{{ hotel.hotelId }}">
                            Add to Itinerary
                          </button>
                        </div>
                    </div>
                {% endfor %}
            {% else %}
                <p class="text-gray-500 text-center py-4">No hotels found for this location.</p>
            {% endif %}
        </div>
      </div>

      <!-- Itinerary List -->
      <div id="itinerary-list" class="space-y-4" style="display:none;">
        <div class="flex justify-between items-center mb-4">
          <h3 class="text-lg font-semibold text-gray-800">Your Itinerary</h3>
          <button onclick="saveItinerary()" class="save-itinerary-btn">
            Save Itinerary
          </button>
        </div>
        <div id="itinerary-days" class="space-y-6">
          <!-- Days will be added here dynamically -->
        </div>
      </div>
    </div>

    <!-- Map Panel -->
    <div class="w-full md:w-2/3 lg:w-3/5 rounded-lg shadow-xl overflow-hidden" id="map" style="height: calc(100vh - 120px); min-height: 400px;"></div>
  </div>

  {% else %}
  <!-- Fallback if city not found -->
  <div class="flex justify-center items-center h-full">
    <div class="text-center p-10">
      <h1 class="text-2xl font-semibold text-gray-700 mb-4">City Information Not Available</h1>
      <p class="text-gray-500 mb-6">We couldn't retrieve details for the city: <strong>{{ city_name_searched|default:"the requested city" }}</strong>.</p>
      <a href="{% url 'create_trip' %}" class="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-3 px-5 rounded-lg">
        Try Another Search
      </a>
    </div>
  </div>
  {% endif %}
</div>

<!-- Leaflet Assets -->
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
<!-- Sortable.js for drag and drop -->
<script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
<script id="pois-data" type="application/json">{{ pois_json }}</script>
<script id="hotels-data" type="application/json">{{ hotels_json }}</script>
<script id="itinerary-data" type="application/json">{{ itinerary_json|default:"{}" }}</script>

<script>
let map;
const poiMarkers = {};
const hotelMarkers = {};
let currentHighlightedItem = null;
const leftPanel = document.getElementById('left-panel');
let currentActiveMapMarker = null;
let currentActiveMarkerType = null;
let currentItemToAdd = null;

// Modal functions
function showModal(type, id) {
    const modal = document.getElementById('addToItineraryModal');
    if (!modal) return;
    const dateInput = document.getElementById('itineraryDate');
    const timeInput = document.getElementById('itineraryTime');
    if (!dateInput || !timeInput) return;
    dateInput.value = '{{ check_in_date }}';
    timeInput.value = '09:00';
    currentItemToAdd = { type, id };
    console.log('Item to add:', currentItemToAdd); // Debugging log
    modal.style.display = 'flex'; // Use flex for centering
    document.body.style.overflow = 'hidden';
}

function closeModal() {
    const modal = document.getElementById('addToItineraryModal');
    if (modal) {
        modal.style.display = 'none';
        document.body.style.overflow = '';
    }
    currentItemToAdd = null;
}

function showToast(message, isError = false) {
    const toast = document.getElementById('toast');
    toast.textContent = message;
    toast.className = `toast ${isError ? 'error' : ''}`;
    toast.classList.add('show');

    setTimeout(() => {
        toast.classList.remove('show');
    }, 3000);
}

// Standard Icons
const poiIcon = L.icon({
    iconUrl: 'https://cdn-icons-png.flaticon.com/512/4553/4553399.png',
    iconSize: [28, 28], iconAnchor: [14, 28], popupAnchor: [0, -28]
});

const hotelMapIcon = L.icon({
    iconUrl: 'https://cdn-icons-png.flaticon.com/512/1397/1397898.png',
    iconSize: [28, 28], iconAnchor: [14, 28], popupAnchor: [0, -28]
});

const selectedMarkerIcon = L.icon({
    iconUrl: 'https://cdn-icons-png.flaticon.com/512/1828/1828395.png',
    iconSize: [36, 36],
    iconAnchor: [18, 36],
    popupAnchor: [0, -36],
    className: 'selected-location-marker'
});

// Active (larger) Icons
const activePoiIcon = L.icon({
    iconUrl: 'https://cdn-icons-png.flaticon.com/512/4553/4553399.png',
    iconSize: [36, 36], iconAnchor: [18, 36], popupAnchor: [0, -36], className: 'active-map-marker'
});
const activeHotelIcon = L.icon({
    iconUrl: 'https://cdn-icons-png.flaticon.com/512/1397/1397898.png',
    iconSize: [36, 36], iconAnchor: [18, 36], popupAnchor: [0, -36], className: 'active-map-marker'
});

let selectedMarker = null;

function resetSelectedMarker() {
    if (selectedMarker) {
        map.removeLayer(selectedMarker);
        selectedMarker = null;
    }
}

function showSelectedLocation(lat, lon) {
    resetSelectedMarker();
    selectedMarker = L.marker([lat, lon], { icon: selectedMarkerIcon }).addTo(map);
    map.setView([lat, lon], 15);
}

function resetActiveMarker() {
    if (currentActiveMapMarker) {
        if (currentActiveMarkerType === 'poi') {
            currentActiveMapMarker.setIcon(poiIcon);
        } else if (currentActiveMarkerType === 'hotel') {
            currentActiveMapMarker.setIcon(hotelMapIcon);
        }
        currentActiveMapMarker = null;
        currentActiveMarkerType = null;
    }
}

function removeHighlight() {
    if (currentHighlightedItem) {
        currentHighlightedItem.classList.remove('highlighted-item');
        currentHighlightedItem = null;
    }
}

function highlightAndScrollToListitem(itemId, itemType) {
    removeHighlight();
    const listItem = document.getElementById(itemId);
    if (listItem) {
        // Ensure the correct tab is visible before scrolling
        if (itemType === 'poi' && document.getElementById('poi-list').style.display === 'none') {
            toggleView('poi');
        } else if (itemType === 'hotels' && document.getElementById('hotel-list').style.display === 'none') {
            toggleView('hotels');
        }
        listItem.classList.add('highlighted-item');
        // Scroll into view, ensuring it's visible if the panel is scrollable
        leftPanel.scrollTop = listItem.offsetTop - leftPanel.offsetTop - 20; // Adjust offset as needed
        currentHighlightedItem = listItem;
    }
}

function focusMapAndPopup(lat, lon, markerId, itemType) {
    resetActiveMarker(); // Reset previously active marker
    showSelectedLocation(lat, lon); // Add red pointer at selected location

    if (map && lat !== undefined && lon !== undefined) {
        let markerToActivate;
        let activeIconToUse;

        if (itemType === 'poi' && poiMarkers[markerId]) {
            markerToActivate = poiMarkers[markerId];
            activeIconToUse = activePoiIcon;
        } else if ((itemType === 'hotel' || itemType === 'hotels') && hotelMarkers[markerId]) {
            markerToActivate = hotelMarkers[markerId];
            activeIconToUse = activeHotelIcon;
        } else {
             console.warn("Could not find marker for focus: ", markerId, itemType);
             return;
        }

        if (markerToActivate) {
            markerToActivate.setIcon(activeIconToUse);
            currentActiveMapMarker = markerToActivate;
            currentActiveMarkerType = itemType === 'hotels' ? 'hotel' : itemType;

            setTimeout(() => {
                 markerToActivate.openPopup();
            }, 300);
        }
    }
}

// Itinerary Management
let itinerary = {};
let startDate = new Date('{{ check_in_date }}');
let endDate = new Date('{{ check_out_date }}');

function initializeItinerary() {
    const days = Math.floor((endDate - startDate) / (1000 * 60 * 60 * 24)) + 1;
    const itineraryDays = document.getElementById('itinerary-days');
    itineraryDays.innerHTML = '';

    for (let i = 0; i < days; i++) {
        const currentDate = new Date(startDate);
        currentDate.setDate(startDate.getDate() + i);
        const dayStr = currentDate.toISOString().split('T')[0];
        const dayDiv = document.createElement('div');
        dayDiv.className = 'itinerary-day';
        dayDiv.innerHTML = `
            <h4 class="day-header">Day ${i + 1} - ${currentDate.toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}</h4>
            <div class="itinerary-items" data-date="${dayStr}">
                <div class="empty-day-message">Drag and drop items here to plan your day</div>
            </div>
        `;
        itineraryDays.appendChild(dayDiv);
        // Initialize Sortable for this day's items
        new Sortable(dayDiv.querySelector('.itinerary-items'), {
            group: 'itinerary',
            animation: 150,
            ghostClass: 'bg-gray-100',
            onAdd: function(evt) {
                // Remove empty message if present
                const emptyMsg = evt.to.querySelector('.empty-day-message');
                if (emptyMsg) emptyMsg.remove();
            },
            onRemove: function(evt) {
                // If source day is now empty, add empty message
                if (evt.from.children.length === 0) {
                    evt.from.innerHTML = '<div class="empty-day-message">Drag and drop items here to plan your day</div>';
                }
            },
            onEnd: function(evt) {
                // Remove empty message if items exist, add if empty
                [evt.from, evt.to].forEach(container => {
                    if (container) {
                        if (container.children.length === 0) {
                            container.innerHTML = '<div class="empty-day-message">Drag and drop items here to plan your day</div>';
                        } else {
                            const emptyMsg = container.querySelector('.empty-day-message');
                            if (emptyMsg) emptyMsg.remove();
                        }
                    }
                });
                updateItineraryOrder();
            }
        });
    }
    // Update min/max for add-to-itinerary modal date input
    const dateInput = document.getElementById('itineraryDate');
    if (dateInput) {
        dateInput.min = startDate.toISOString().split('T')[0];
        dateInput.max = endDate.toISOString().split('T')[0];
    }
}

function openEditDatesModal() {
    document.getElementById('editStartDate').value = startDate.toISOString().split('T')[0];
    document.getElementById('editEndDate').value = endDate.toISOString().split('T')[0];
    document.getElementById('editDatesModal').style.display = 'flex';
    document.body.style.overflow = 'hidden';
}

function closeEditDatesModal() {
    document.getElementById('editDatesModal').style.display = 'none';
    document.body.style.overflow = '';
}

function saveEditedDates() {
    const newStart = document.getElementById('editStartDate').value;
    const newEnd = document.getElementById('editEndDate').value;
    if (!newStart || !newEnd || newStart > newEnd) {
        showToast('Invalid date range', true);
        return;
    }
    startDate = new Date(newStart);
    endDate = new Date(newEnd);
    initializeItinerary();
    closeEditDatesModal();
    showToast('Trip dates updated!');
}

function confirmAddToItinerary() {
    console.log('Confirming add to itinerary:', currentItemToAdd); // Debugging log
    if (!currentItemToAdd) {
        console.error('No item selected for adding to itinerary');
        showToast('Please select an item to add to the itinerary', true);
        return;
    }

    const dateInput = document.getElementById('itineraryDate');
    const timeInput = document.getElementById('itineraryTime');

    if (!dateInput || !timeInput) {
        console.error('Date or time input elements not found!');
        return;
    }

    if (!dateInput.value || !timeInput.value) {
        showToast('Please select both date and time', true);
        return;
    }

    const selectedDate = dateInput.value;
    const selectedTime = timeInput.value;

    // Add robust check for date range
    if (selectedDate < startDate.toISOString().split('T')[0] || selectedDate > endDate.toISOString().split('T')[0]) {
        showToast('Please select a date within your trip range.', true);
        return;
    }

    const item = currentItemToAdd.type === 'poi'
        ? document.getElementById(`poi-item-${currentItemToAdd.id}`)
        : document.getElementById(`hotel-item-${currentItemToAdd.id}`);

    if (!item) {
        console.error('Item element not found:', currentItemToAdd);
        showToast('Item not found', true);
        return;
    }

    const name = item.dataset.name;
    const categories = item.dataset.categories || '';
    const lat = item.dataset.lat;
    const lon = item.dataset.lon;

    // Find the day container for the selected date
    const dayContainer = document.querySelector(`.itinerary-items[data-date="${selectedDate}"]`);
    if (!dayContainer) {
        console.error('Day container not found for date:', selectedDate);
        showToast('Invalid date selected', true);
        return;
    }

    // Remove empty day message if it exists
    const emptyMessage = dayContainer.querySelector('.empty-day-message');
    if (emptyMessage) {
        emptyMessage.remove();
    }

    const itemDiv = createItineraryItem(currentItemToAdd.type, currentItemToAdd.id, name, categories, lat, lon, selectedTime);
    dayContainer.appendChild(itemDiv);

    // Sort items by time
    const items = Array.from(dayContainer.children);
    items.sort((a, b) => {
        const timeA = a.dataset.time || '00:00';
        const timeB = b.dataset.time || '00:00';
        return timeA.localeCompare(timeB);
    });

    dayContainer.innerHTML = '';
    items.forEach(item => dayContainer.appendChild(item));

    updateItineraryOrder();
    closeModal();
    showToast(`Added ${name} to your itinerary for ${new Date(selectedDate).toLocaleDateString()} at ${selectedTime}`);
}

function createItineraryItem(type, id, name, categories, lat, lon, time) {
    const div = document.createElement('div');
    div.className = 'itinerary-item enterprise-itinerary-item';
    div.dataset.type = type;
    div.dataset.id = id;
    div.dataset.lat = lat;
    div.dataset.lon = lon;
    div.dataset.time = time;

    div.innerHTML = `
        <div class="drag-handle enterprise-drag-handle" title="Drag to reorder">
          <span class="drag-dot"></span>
          <span class="drag-dot"></span>
          <span class="drag-dot"></span>
        </div>
        <input type="time" class="itinerary-time-edit enterprise-time-edit" value="${time}" aria-label="Edit time">
        <div class="flex-1 ml-3">
            <h4 class="font-medium text-gray-800" style="margin: 0;">${name}</h4>
        </div>
        <button onclick="removeFromItinerary(this)" class="remove-item-btn enterprise-remove-btn" title="Remove">Ã—</button>
    `;

    // Add event listener for time change
    div.querySelector('.itinerary-time-edit').addEventListener('change', function(e) {
        div.dataset.time = this.value;
        updateItineraryOrder();
        // Optionally, re-sort items in the day container
        const dayContainer = div.closest('.itinerary-items');
        if (dayContainer) {
            const items = Array.from(dayContainer.children).filter(child => child.classList.contains('itinerary-item'));
            items.sort((a, b) => {
                const timeA = a.dataset.time || '00:00';
                const timeB = b.dataset.time || '00:00';
                return timeA.localeCompare(timeB);
            });
            dayContainer.innerHTML = '';
            items.forEach(item => dayContainer.appendChild(item));
            // If after sorting, no items, add empty message
            if (items.length === 0) {
                dayContainer.innerHTML = '<div class="empty-day-message">Drag and drop items here to plan your day</div>';
            }
        }
    });
    return div;
}

function removeFromItinerary(button) {
    const itemContainer = button.closest('.itinerary-items');
    button.closest('.itinerary-item').remove();
    // If this was the last item, add back the empty day message
    const remainingItems = Array.from(itemContainer.children).filter(child => child.classList.contains('itinerary-item'));
    if (remainingItems.length === 0) {
        itemContainer.innerHTML = '<div class="empty-day-message">Drag and drop items here to plan your day</div>';
    }
    updateItineraryOrder();
}

function updateItineraryOrder() {
    itinerary = {};
    document.querySelectorAll('.itinerary-day').forEach(dayDiv => {
        const date = dayDiv.querySelector('.itinerary-items').dataset.date;
        const items = Array.from(dayDiv.querySelectorAll('.itinerary-item')).map(item => ({
            type: item.dataset.type,
            id: item.dataset.id,
            name: item.querySelector('h4').textContent,
            lat: item.dataset.lat,
            lon: item.dataset.lon
        }));
        if (items.length > 0) {
            itinerary[date] = items;
        }
    });
}

async function saveItinerary() {
    if (!firebase.auth().currentUser) {
        alert('Please sign in to save your itinerary');
        return;
    }

    const tripData = {
        userId: firebase.auth().currentUser.uid,
        city: '{{ city_name }}',
        startDate: startDate,
        endDate: endDate,
        itinerary: itinerary,
        createdAt: firebase.firestore.FieldValue.serverTimestamp()
    };

    try {
        await firebase.firestore().collection('trips').add(tripData);
        alert('Itinerary saved successfully!');
    } catch (error) {
        console.error('Error saving itinerary:', error);
        alert('Failed to save itinerary. Please try again.');
    }
}

function toggleView(view) {
    const poiList = document.getElementById('poi-list');
    const hotelList = document.getElementById('hotel-list');
    const itineraryList = document.getElementById('itinerary-list');
    const btnPoi = document.getElementById('btn-poi');
    const btnHotels = document.getElementById('btn-hotels');
    const btnItinerary = document.getElementById('btn-itinerary');

    if (!poiList || !hotelList || !itineraryList || !btnPoi || !btnHotels || !btnItinerary) {
        console.error('Toggle elements not found!');
        return;
    }

    // Hide all sections
    poiList.style.display = 'none';
    hotelList.style.display = 'none';
    itineraryList.style.display = 'none';

    // Reset all buttons
    [btnPoi, btnHotels, btnItinerary].forEach(btn => {
        btn.classList.remove('text-indigo-600', 'border-indigo-600', 'active');
        btn.classList.add('text-gray-500', 'hover:text-indigo-500');
    });

    // Show selected section and update button
    if (view === 'poi') {
        poiList.style.display = 'block';
        btnPoi.classList.add('text-indigo-600', 'border-indigo-600', 'active');
        btnPoi.classList.remove('text-gray-500', 'hover:text-indigo-500');
    } else if (view === 'hotels') {
        hotelList.style.display = 'block';
        btnHotels.classList.add('text-indigo-600', 'border-indigo-600', 'active');
        btnHotels.classList.remove('text-gray-500', 'hover:text-indigo-500');
    } else if (view === 'itinerary') {
        itineraryList.style.display = 'block';
        btnItinerary.classList.add('text-indigo-600', 'border-indigo-600', 'active');
        btnItinerary.classList.remove('text-gray-500', 'hover:text-indigo-500');
    }
}

function loadSavedItineraryFromJson() {
    const itineraryDataTag = document.getElementById('itinerary-data');
    if (!itineraryDataTag) return;
    let savedItinerary = {};
    try {
        savedItinerary = JSON.parse(itineraryDataTag.textContent);
    } catch (e) {
        console.error("Failed to parse saved itinerary JSON", e);
        return;
    }
    // For each date, add items to the correct day
    Object.entries(savedItinerary).forEach(([date, items]) => {
        const dayContainer = document.querySelector(`.itinerary-items[data-date="${date}"]`);
        if (dayContainer) {
            // Remove empty message
            const emptyMsg = dayContainer.querySelector('.empty-day-message');
            if (emptyMsg) emptyMsg.remove();
            items.forEach(item => {
                const itemDiv = createItineraryItem(
                    item.type,
                    item.id,
                    item.name,
                    item.categories || '',
                    item.lat,
                    item.lon,
                    item.time || '09:00'
                );
                dayContainer.appendChild(itemDiv);
            });
        }
    });
    updateItineraryOrder();
}

// Initialize everything when the document is loaded
document.addEventListener('DOMContentLoaded', function() {
    // Only run the following if city_info is present
    var cityInfoPresent = {{ city_info|yesno:'true,false' }};
    if (!cityInfoPresent) return;

    const lat = parseFloat('{{ city_info.lat }}');
    const lon = parseFloat('{{ city_info.lon }}');

    const pois = JSON.parse(document.getElementById('pois-data').textContent);
    const hotelsDataForMap = JSON.parse(document.getElementById('hotels-data').textContent);

    if (!isNaN(lat) && !isNaN(lon)) {
        requestAnimationFrame(() => {
            map = L.map('map', {
                zoomControl: true,
                scrollWheelZoom: true,
                dragging: true,
                maxZoom: 18,
                minZoom: 2
            }).setView([lat, lon], 13);

            // Ensure map container has proper z-index
            const mapContainer = document.querySelector('.leaflet-container');
            if (mapContainer) {
                mapContainer.style.zIndex = '1';
            }

            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '&copy; OpenStreetMap contributors'
            }).addTo(map);

            // Add POI markers
            if (pois) {
                pois.forEach((p, index) => {
                    // Filter out any POI that looks like a logout/door marker or has a suspicious name/icon
                    const suspiciousIcon = p.properties?.icon && (p.properties.icon.includes('logout') || p.properties.icon.includes('door'));
                    const suspiciousName = p.properties?.name && (p.properties.name.toLowerCase().includes('logout') || p.properties.name.toLowerCase().includes('door'));
                    if (
                        p.geometry?.coordinates?.length === 2 &&
                        typeof p.geometry.coordinates[0] === 'number' &&
                        typeof p.geometry.coordinates[1] === 'number' &&
                        isFinite(p.geometry.coordinates[0]) &&
                        isFinite(p.geometry.coordinates[1]) &&
                        !suspiciousIcon &&
                        !suspiciousName
                    ) {
                        const poiMarkerId = `poi-marker-${index}`;
                        const listItemId = `poi-item-${index}`;
                        const marker = L.marker([p.geometry.coordinates[1], p.geometry.coordinates[0]], { icon: poiIcon })
                            .addTo(map)
                            .bindPopup(`<b>${p.properties.name}</b><br>${p.properties.categories?.join(', ') || 'N/A'}`);

                        marker.on('click', function() {
                            resetActiveMarker(); // Reset any other active marker
                            this.setIcon(activePoiIcon);
                            currentActiveMapMarker = this;
                            currentActiveMarkerType = 'poi';
                            highlightAndScrollToListitem(listItemId, 'poi');
                        });
                        poiMarkers[poiMarkerId] = marker;
                    }
                });
            }

            // Add hotel markers
            if (hotelsDataForMap) {
                hotelsDataForMap.forEach(hotel => {
                    if (
                        hotel.geoCode &&
                        typeof hotel.geoCode.latitude === 'number' &&
                        typeof hotel.geoCode.longitude === 'number' &&
                        isFinite(hotel.geoCode.latitude) &&
                        isFinite(hotel.geoCode.longitude)
                    ) {
                        const hotelMarkerId = `hotel-marker-${hotel.hotelId}`;
                        const listItemId = `hotel-item-${hotel.hotelId}`;
                        const marker = L.marker([hotel.geoCode.latitude, hotel.geoCode.longitude], { icon: hotelMapIcon })
                            .addTo(map)
                            .bindPopup(`<b>${hotel.name || 'Hotel Name N/A'}</b><br>ID: ${hotel.hotelId || 'N/A'}`);

                        marker.on('click', function() {
                            resetActiveMarker(); // Reset any other active marker
                            this.setIcon(activeHotelIcon);
                            currentActiveMapMarker = this;
                            currentActiveMarkerType = 'hotel';
                            highlightAndScrollToListitem(listItemId, 'hotels');
                        });
                        hotelMarkers[hotelMarkerId] = marker;
                    }
                });
            }

            document.querySelectorAll('.poi-list-item').forEach(item => {
                item.addEventListener('click', function() {
                    const itemLat = parseFloat(this.dataset.lat);
                    const itemLon = parseFloat(this.dataset.lon);
                    const markerId = this.dataset.id;
                    removeHighlight(); // Remove highlight from previous list item
                    this.classList.add('highlighted-item');
                    currentHighlightedItem = this;
                    showSelectedLocation(itemLat, itemLon); // Show red pointer
                    focusMapAndPopup(itemLat, itemLon, markerId, 'poi');
                });
            });

            document.querySelectorAll('.hotel-list-item').forEach(item => {
                item.addEventListener('click', function() {
                    const itemLat = parseFloat(this.dataset.lat);
                    const itemLon = parseFloat(this.dataset.lon);
                    const markerId = this.dataset.id;
                    if (!isNaN(itemLat) && !isNaN(itemLon)) {
                        removeHighlight();
                        this.classList.add('highlighted-item');
                        currentHighlightedItem = this;
                        showSelectedLocation(itemLat, itemLon); // Show red pointer
                        focusMapAndPopup(itemLat, itemLon, markerId, 'hotel');
                    } else {
                        removeHighlight();
                        this.classList.add('highlighted-item');
                        currentHighlightedItem = this;
                        resetActiveMarker();
                        console.warn("Hotel item clicked without valid geo-coordinates for map focus: ", this.id);
                    }
                });
            });

            setTimeout(() => { if(map) map.invalidateSize(); }, 500);
        });
    }

    toggleView('poi');

    // Initialize itinerary
    initializeItinerary();
    loadSavedItineraryFromJson();
});
</script>

<style>
/* Custom Modal Styles to avoid Tailwind conflicts */
#addToItineraryModal.custom-modal {
  z-index: 999999 !important;
  display: none;
  position: fixed;
  top: 0; left: 0; width: 100vw; height: 100vh;
  background-color: rgba(0,0,0,0.5);
  justify-content: center;
  align-items: center;
}
#addToItineraryModal.custom-modal[style*="display: flex"] {
  display: flex !important;
}
#addToItineraryModal .custom-modal-content {
  z-index: 1000000 !important;
  margin: auto;
  background: white !important;
  color: black !important;
  padding: 2rem !important;
  border-radius: 1rem !important;
  min-width: 300px;
  min-height: 200px;
  display: block !important;
  box-shadow: 0 8px 32px rgba(79,70,229,0.15), 0 1.5px 6px rgba(0,0,0,0.08);
  border: 1.5px solid #e0e7ff;
}
#addToItineraryModal .custom-modal-header h3 {
  letter-spacing: 0.01em;
  color: #3730a3;
}
#addToItineraryModal .custom-modal-btn-confirm {
  background: linear-gradient(90deg, #6366f1 0%, #818cf8 100%);
  box-shadow: 0 2px 8px rgba(99,102,241,0.08);
}
#addToItineraryModal .custom-modal-btn-confirm:hover {
  background: linear-gradient(90deg, #4338ca 0%, #6366f1 100%);
}
#addToItineraryModal .itinerary-time-edit {
  font-size: 1em;
  color: #4f46e5;
  background: #f3f4f6;
  border: 1px solid #d1d5db;
  border-radius: 0.375rem;
  padding: 0.25rem 0.5rem;
  outline: none;
  transition: border 0.2s;
}
#addToItineraryModal .itinerary-time-edit:focus {
  border: 1.5px solid #6366f1;
  background: #fff;
}
/* Lower the z-index of all Leaflet and map elements to ensure modal is always on top */
#map,
.leaflet-container,
.leaflet-pane,
.leaflet-map-pane,
.leaflet-tile-pane,
.leaflet-overlay-pane,
.leaflet-shadow-pane,
.leaflet-marker-pane,
.leaflet-tooltip-pane,
.leaflet-popup-pane,
.leaflet-control,
.leaflet-top,
.leaflet-bottom,
.leaflet-left,
.leaflet-right {
  z-index: 1 !important;
}

/* --- Enterprise/Modern Itinerary Card Styles --- */
.enterprise-itinerary-item {
  display: flex;
  align-items: center;
  padding: 1rem 1.25rem;
  border: 1.5px solid #e5e7eb;
  border-radius: 0.75rem;
  margin-bottom: 1rem;
  background: linear-gradient(90deg, #f8fafc 60%, #f1f5f9 100%);
  box-shadow: 0 2px 8px rgba(36, 41, 46, 0.04), 0 1.5px 6px rgba(99,102,241,0.04);
  transition: box-shadow 0.2s, border 0.2s, background 0.2s;
  position: relative;
}
.enterprise-itinerary-item:hover {
  box-shadow: 0 4px 16px rgba(99,102,241,0.10), 0 2px 8px rgba(36,41,46,0.06);
  border: 1.5px solid #6366f1;
  background: linear-gradient(90deg, #f1f5f9 60%, #e0e7ff 100%);
}

.enterprise-drag-handle {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  width: 2rem;
  height: 2.5rem;
  margin-right: 1rem;
  cursor: grab;
  border-radius: 0.5rem;
  background: transparent;
  transition: background 0.2s;
}
.enterprise-drag-handle:hover {
  background: #e0e7ff;
}
.drag-dot {
  display: block;
  width: 6px;
  height: 6px;
  margin: 2px 0;
  border-radius: 50%;
  background: #a5b4fc;
  box-shadow: 0 1px 2px rgba(99,102,241,0.10);
}

.enterprise-time-edit {
  min-width: 90px;
  max-width: 120px;
  font-size: 1.08em;
  color: #3730a3;
  background: #f3f4f6;
  border: 1.5px solid #c7d2fe;
  border-radius: 0.375rem;
  padding: 0.25rem 0.5rem;
  outline: none;
  margin-right: 1.25rem;
  box-shadow: 0 1px 2px rgba(99,102,241,0.04);
  transition: border 0.2s, box-shadow 0.2s;
}
.enterprise-time-edit:focus {
  border: 1.5px solid #6366f1;
  background: #fff;
  box-shadow: 0 2px 8px rgba(99,102,241,0.08);
}

.enterprise-remove-btn {
  color: #ef4444;
  background: transparent;
  border: none;
  font-size: 1.5rem;
  border-radius: 0.375rem;
  padding: 0.25rem 0.5rem;
  margin-left: 0.5rem;
  transition: background 0.2s, color 0.2s;
}
.enterprise-remove-btn:hover {
  background: #fee2e2;
  color: #dc2626;
}

/* Selected Location Marker Animation */
.selected-location-marker {
    animation: pulse 1.5s ease-in-out infinite;
}

@keyframes pulse {
    0% {
        transform: scale(1);
        opacity: 1;
    }
    50% {
        transform: scale(1.2);
        opacity: 0.8;
    }
    100% {
        transform: scale(1);
        opacity: 1;
    }
}
</style>
{% endblock %}
